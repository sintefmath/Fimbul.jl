import{_ as r,C as o,c as p,o as h,j as i,a as t,aA as n,G as a,w as l}from"./chunks/framework.Sn1b_dQf.js";const F=JSON.parse('{"title":"Utilities","description":"","frontmatter":{},"headers":[],"relativePath":"man/cases/utils.md","filePath":"man/cases/utils.md","lastUpdated":null}'),d={name:"man/cases/utils.md"},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""};function g(u,s,E,m,y,f){const e=o("Badge");return h(),p("div",null,[s[10]||(s[10]=i("h1",{id:"Utilities",tabindex:"-1"},[t("Utilities "),i("a",{class:"header-anchor",href:"#Utilities","aria-label":'Permalink to "Utilities {#Utilities}"'},"â€‹")],-1)),i("details",c,[i("summary",null,[s[0]||(s[0]=i("a",{id:"Fimbul.make_schedule",href:"#Fimbul.make_schedule"},[i("span",{class:"jlbinding"},"Fimbul.make_schedule")],-1)),s[1]||(s[1]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[4]||(s[4]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(forces, durations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num_reports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">report_interval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num_cycles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a simulation schedule from a set of durations and associated forces.</p><p>This function generates a detailed schedule based on user-defined durations and associated forcing conditions. It allows for flexible reporting intervals within each period and supports repeating the schedule for multiple cycles.</p><p><strong>Arguments</strong></p><ul><li><p><code>forces</code>: Vector of forcing conditions, one for each period</p></li><li><p><code>durations</code>: Vector of durations (in seconds) for each period</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>num_reports::Union{Int,Vector{Int},Missing}=missing</code>: Number of reports desired within each period. Can be a single integer applied to all periods or a vector specifying the number of reports for each period. If <code>missing</code>, the function will use <code>report_interval</code> instead.</p></li><li><p><code>report_interval::Union{Real,Vector{Real},Missing}=missing</code>: Time interval (in seconds) between reports within each period. Can be a single value applied to all periods or a vector specifying the interval for each period. If <code>missing</code>, the function will use <code>num_reports</code> instead.</p></li><li><p><code>num_cycles::Int=1</code>: Number of times to repeat the entire schedule.</p></li></ul><p>NOTE: Either <code>num_reports</code> or <code>report_interval</code> must be specified, but not both. If none are provided, the function defaults to 5 reports per period.</p>`,8)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/sintefmath/Fimbul.jl/blob/35330a18f5764c99e59df782e61056a3162e90bc/src/cases/utils.jl#L1-L31",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[5]||(s[5]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(forces, periods; start_year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_years</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, report_interval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">day)</span></span></code></pre></div><p>Create a simulation schedule with time steps and forces for multi-period reservoir simulations using actual dates to define periods.</p><p>This function generates a detailed schedule based on user-defined periods and associated forcing conditions. It automatically handles multi-year simulations with periodic patterns and provides fleible time step control within each period.</p><p><strong>Arguments</strong></p><ul><li><p><code>forces</code>: Vector of forcing conditions, one for each period. Each element should contain well controls, boundary conditions, or other simulation drivers for the corresponding period.</p></li><li><p><code>periods</code>: Vector of time period definitions. Length should be one more than <code>forces</code> to define period boundaries. Periods can be specified with month numbers, (month, day) tuples, (month, day, hour) tuples, or month name strings.</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>start_year::Union{Int,Missing}=missing</code>: Starting year for the simulation. If <code>missing</code>, uses the current year.</p></li><li><p><code>num_years::Int=1</code>: Number of years to simulate with the periodic schedule.</p></li><li><p><code>report_interval::Union{Real,Vector}=14day</code>: Time step size within each period. Can be a single value applied to all periods or a vector with specific intervals for each period.</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>dt</code>: Vector of time step sizes in seconds for the entire simulation</p></li><li><p><code>force_vec</code>: Vector of forcing conditions corresponding to each time step</p></li><li><p><code>timestamps</code>: Vector of DateTime objects marking the time points</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define seasonal operations: charge in summer, rest in winter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forces </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [charge_controls, rest_controls]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">periods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;June&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;September&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;December&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># June-Sep charge, Sep-Dec rest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dt, forces, times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> make_schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(forces, periods;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num_years</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, report_interval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7si_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:day</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,11)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[3]||(s[3]=[i("a",{href:"https://github.com/sintefmath/Fimbul.jl/blob/35330a18f5764c99e59df782e61056a3162e90bc/src/cases/utils.jl#L87-L128",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",k,[i("summary",null,[s[6]||(s[6]=i("a",{id:"Fimbul.make_utes_schedule",href:"#Fimbul.make_utes_schedule"},[i("span",{class:"jlbinding"},"Fimbul.make_utes_schedule")],-1)),s[7]||(s[7]=t()),a(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[9]||(s[9]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_utes_schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(forces_charge, forces_discharge, forces_rest; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a specialized schedule for Underground Thermal Energy Storage (UTES)</p><p>This function generates a three-phase operational schedule typical for thermal energy storage:</p><ol><li><p><strong>Charging phase</strong>: Inject hot water to store thermal energy</p></li><li><p><strong>Rest phase</strong>: No well activity</p></li><li><p><strong>Discharging phase</strong>: Extract stored thermal energy for heating applications</p></li></ol><p>The schedule automatically handles seasonal operations with user-defined charge and discharge periods, typically aligned with energy availability (summer charging) and demand (winter discharging).</p><p>NOTE: The function does not validate that the provided forcing conditions are appropriate for UTES operations. It is up to the user to ensure that the <code>forces_charge</code>, <code>forces_discharge</code>, and <code>forces_rest</code> inputs contain suitable well controls.</p><p><strong>Arguments</strong></p><ul><li><p><code>forces_charge</code>: Forcing conditions during charging phase (hot water injection)</p></li><li><p><code>forces_discharge</code>: Forcing conditions during discharging phase (thermal energy extraction)</p></li><li><p><code>forces_rest</code>: Forcing conditions during rest periods (no well activity)</p></li></ul><p><strong>Keyword Arguments</strong></p><ul><li><p><code>charge_period=[&quot;June&quot;, &quot;September&quot;]</code>: Start and end of charging phase (see <code>make_schedule</code> for valid formats)</p></li><li><p><code>discharge_period=[&quot;December&quot;, &quot;March&quot;]</code>: Start and end of discharging phase (see <code>make_schedule</code> for valid formats)</p></li><li><p><code>start_year::Union{Int,Missing}=missing</code>: Starting year for simulation. Defaults to current year.</p></li><li><p><code>num_years::Int=5</code>: Number of operational years to simulate.</p></li><li><p><code>kwargs...</code>: Additional arguments passed to <code>make_schedule()</code> (e.g., <code>report_interval</code>).</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>dt</code>: Vector of time step sizes in seconds</p></li><li><p><code>forces</code>: Vector of forcing conditions for each time step</p></li><li><p><code>timestamps</code>: Vector of DateTime objects for temporal tracking</p></li></ul><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Standard ATES schedule: charge Jun-Sep, discharge Dec-Mar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dt, forces, times </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> make_utes_schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    charge_forces, discharge_forces, rest_forces;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    charge_period </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;June&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;September&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    discharge_period </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;December&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;March&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num_years </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    report_interval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7si_unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:day</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Notes</strong></p><ul><li><p>Rest periods are automatically inserted between charge and discharge phases</p></li><li><p>The function handles year transitions and ensures chronological ordering</p></li><li><p>Periods with zero duration are automatically filtered out</p></li></ul>`,16)),a(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[8]||(s[8]=[i("a",{href:"https://github.com/sintefmath/Fimbul.jl/blob/35330a18f5764c99e59df782e61056a3162e90bc/src/cases/utils.jl#L177-L233",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const b=r(d,[["render",g]]);export{F as __pageData,b as default};
