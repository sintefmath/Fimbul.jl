import{_ as o,C as r,c as n,o as l,j as t,a as i,aA as d,G as a,w as c}from"./chunks/framework.BQfdjCaB.js";const b=JSON.parse('{"title":"Utilities","description":"","frontmatter":{},"headers":[],"relativePath":"man/cases/utils.md","filePath":"man/cases/utils.md","lastUpdated":null}'),u={name:"man/cases/utils.md"},h={class:"jldocstring custom-block",open:""};function p(m,e,g,_,k,f){const s=r("Badge");return l(),n("div",null,[e[4]||(e[4]=t("h1",{id:"Utilities",tabindex:"-1"},[i("Utilities "),t("a",{class:"header-anchor",href:"#Utilities","aria-label":'Permalink to "Utilities {#Utilities}"'},"​")],-1)),t("details",h,[t("summary",null,[e[0]||(e[0]=t("a",{id:"Fimbul.make_utes_schedule",href:"#Fimbul.make_utes_schedule"},[t("span",{class:"jlbinding"},"Fimbul.make_utes_schedule")],-1)),e[1]||(e[1]=i()),a(s,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=d('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">make_utes_schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(forces_charge, forces_discharge, forces_rest; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyword arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct a schedule for a UTES system with a cycle of charge – rest – discharge – rest.</p><p><strong>Keyword arguments</strong></p><ul><li><p><code>charge_months::Vector{String} = [&quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;]</code>: Months in which the system is charged.</p></li><li><p><code>discharge_months::Vector{String} = [&quot;December&quot;, &quot;January&quot;, &quot;February&quot;, &quot;March&quot;]</code>: Months in which the system is discharged.</p></li><li><p><code>start_month::Union{Missing, String}</code>: Month in which the schedule starts. Defaults to the first month of charging.</p></li><li><p><code>num_years::Int</code>: Number of years the schedule is repeated (starting from 2025). If provided, keyword argument <code>years</code> must be missing.</p></li><li><p><code>years::Vector{Int}</code>: Years in which the schedule is repeated. Defaults to <code>2025:num_years</code>. If provided, keyword argument <code>num_years</code> must be missing.</p></li><li><p><code>report_interval = 14si_unit(:day)</code>: Interval at which the simulation output is reported.</p></li></ul>',4)),a(s,{type:"info",class:"source-link",text:"source"},{default:c(()=>[...e[2]||(e[2]=[t("a",{href:"https://github.com/sintefmath/Fimbul.jl/blob/a99d950338c38a65079b236b82a64c65606e6f97/src/cases/utils.jl#L3-L23",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const q=o(u,[["render",p]]);export{b as __pageData,q as default};
